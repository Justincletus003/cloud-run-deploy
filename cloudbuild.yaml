# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# [START cloudbuild_sql_proxy]
steps:
  # Run tests and save to file
  - name: golang:1.16
    entrypoint: /bin/bash
    args: 
      - -c
      - |
        go install github.com/jstemmer/go-junit-report/v2@latest
        2>&1 go test -timeout 1m -v ./... | /go/bin/go-junit-report -set-exit-code -iocopy -out ${SHORT_SHA}_test_log.xml
        go version
        go get -u -d github.com/golang-migrate/migrate/cmd/migrate
        
      # cd $GOPATH/src/github.com/golang-migrate/migrate/cmd/migrate
      # git --version
      # git checkout v4.1.0
      # go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@v4.1.0
      # migrate -version


  # [END cloudbuild_go_test_yaml]
  # - id: build
  #   # Build your application
  #   waitFor: ['-']
  # - id: "build"
  #   name: "gcr.io/cloud-builders/docker"
  #   args: ["build", "-t", "${_IMAGE_NAME}", "/workspace/."]

  # - id: install-proxy
  #   name: gcr.io/cloud-builders/wget
  #   entrypoint: bash
  #   args:
  #     - '-c'
  #     - wget -O /workspace/cloud_sql_proxy https://storage.googleapis.com/cloudsql-proxy/v1.15/cloud_sql_proxy.linux.386 && chmod +x /workspace/cloud_sql_proxy
  #   waitFor: ['-']

  # - id: migrate
  #   name: gcr.io/cloud-builders/docker
  #   entrypoint: /bin/bash
  #   env:
  #     - "DATABASE_NAME=${_DATABASE_NAME}"
  #     - "DATABASE_USER=${_DATABASE_USER}"
  #     - "INSTANCE_CONNECTION_NAME=${_INSTANCE_CONNECTION_NAME}"
  #     - "DATABASE_TYPE=${_DATABASE_TYPE}"
  #   secretEnv:
  #     - DATABASE_PASS
  #     - CRED_FILE
  #   args:
  #     - '-c'
  #     - |
  #       bash workspace/env.sh
  #       db_pass=$(cat DB_PASS)       
  #       /workspace/cloud_sql_proxy -dir=/workspace -instances=${_INSTANCE_CONNECTION_NAME}=tcp:3306 -credential_file=cloud-sa.json & sleep 2
        
  #     #go version        
  #     # docker run -v migrator/migrations --network "host" -p 3306:3306 migrate/migrate -path=migrator/migrations -database "mysql://${_DATABASE_USER}:${db_pass}@tcp(127.0.0.1:3306)/test_db?sslmode=disable" up      
  #   timeout: '1200s'
  #   waitFor: [build, install-proxy]

  # - id: "docker-build"
  #   name: "gcr.io/cloud-builders/docker"
  #   args: ["build", "-t", "${_IMAGE_NAME}", "sql-proxy/."]

  # - id: "docker-push"
  #   name: "gcr.io/cloud-builders/docker"
  #   args: ["push", "${_IMAGE_NAME}"]

  # # [START cloudbuild_sql_proxy_layer]
  # - id: "docker-layer"
  #   name: "gcr.io/cloud-builders/docker"
  #   entrypoint: /bin/bash
  #   args:
  #     - '-c'
  #     - |
  #       echo "FROM $_IMAGE_NAME
  #       COPY --from=gcr.io/cloudsql-docker/gce-proxy /cloud_sql_proxy /cloudsql/cloud_sql_proxy" > Dockerfile-proxy;
  #       docker build -f Dockerfile-proxy -t ${_IMAGE_NAME}-proxy .
  # [END cloudbuild_sql_proxy_layer]

  # # [START cloudbuild_sql_proxy_tcp]
  # # For TCP connections
  # - id: "migrate-tcp"
  #   name: "${_IMAGE_NAME}-proxy"
  #   dir: sql-proxy
  #   env:
  #     - "DATABASE_NAME=${_DATABASE_NAME}"
  #     - "DATABASE_USER=${_DATABASE_USER}"
  #     - "DATABASE_HOST=127.0.0.1"
  #     - "DATABASE_PORT=${_DATABASE_PORT}"
  #     - "DATABASE_TYPE=${_DATABASE_TYPE}"
  #   secretEnv:
  #     - DATABASE_PASS
  #   entrypoint: /bin/bash
  #   args:
  #     - '-c'
  #     - |
  #       /cloudsql/cloud_sql_proxy -instances=${_INSTANCE_CONNECTION_NAME}=tcp:${_DATABASE_PORT} & sleep 2;
  #     # python migrate.py # for example
  # # [END cloudbuild_sql_proxy_tcp]

  # [START cloudbuild_sql_proxy_socket]
  # For Unix Socket connections
  # - id: "migrate-socket"
  #   name: "${_IMAGE_NAME}-proxy"
  #   dir: sql-proxy
  #   env:
  #     - "DATABASE_NAME=${_DATABASE_NAME}"
  #     - "DATABASE_USER=${_DATABASE_USER}"
  #     - "INSTANCE_CONNECTION_NAME=${_INSTANCE_CONNECTION_NAME}"
  #     - "DATABASE_TYPE=${_DATABASE_TYPE}"
  #   secretEnv:
  #     - DATABASE_PASS
  #   entrypoint: /bin/bash
  #   args:
  #     - '-c'
  #     - |
  #       /cloudsql/cloud_sql_proxy -dir=/cloudsql &
      #bash migrate.sh
      #/cloudsql/cloud_sql_proxy -instances=${_INSTANCE_CONNECTION_NAME} -dir=/cloudsql & sleep 2;
  # [END cloudbuild_sql_proxy_socket]
  # [START cloudbuild_go_image_yaml]
  # Docker Build
  # - name: 'gcr.io/cloud-builders/docker'
  #   dir: migrator
  #   env:
  #     - "DATABASE_NAME=${_DATABASE_NAME}"
  #     - "DATABASE_USER=${_DATABASE_USER}"
  #     - "INSTANCE_CONNECTION_NAME=${_INSTANCE_CONNECTION_NAME}"
  #     - "DATABASE_TYPE=${_DATABASE_TYPE}"
  #   secretEnv:
  #     - DATABASE_PASS
  #   entrypoint: /bin/bash
  #   args:
  #     - '-c'
  #     - |
  #       bash migrate.sh
  
  # [END cloudbuild_go_image_yaml]

  # # [START cloudbuild_go_image_yaml]
  # # Docker Build
  # - name: 'gcr.io/cloud-builders/docker'
  #   args: ['build', '-t', 
  #          'gcr.io/$PROJECT_ID/cloud-run-deploy:$SHORT_SHA', '.']
  # # [END cloudbuild_go_image_yaml]
  
  # # [START cloudbuild_go_push_yaml]
  # # Docker push to Google Artifact Registry
  # - name: 'gcr.io/cloud-builders/docker'
  #   args: ['push', 'gcr.io/$PROJECT_ID/cloud-run-deploy:$SHORT_SHA']
  # # [END cloudbuild_go_push_yaml]
  
  # # [START cloudbuild_go_deploy_yaml]
  # # Deploy to Cloud Run
  # - name: 'gcr.io/cloud-builders/gcloud'
  #   args: ['run', 'deploy', 'cloud-run-deploy', 
  #          '--image=gcr.io/$PROJECT_ID/cloud-run-deploy:$SHORT_SHA', 
  #          '--region', 'us-central1', '--platform', 'managed']
  # # [END cloudbuild_go_deploy_yaml]

options:
  dynamic_substitutions: true

substitutions:
  _DATABASE_USER: sandbox_user
  _DATABASE_NAME: test_db
  _INSTANCE_CONNECTION_NAME: ${PROJECT_ID}:us-central1:lighthousedb
  _DATABASE_PORT: '3306'
  _DATABASE_TYPE: mysql
  _DATABASE_PASSWORD_KEY: lh-sandbox-db-pwd
  _IMAGE_NAME: gcr.io/${PROJECT_ID}/sample-sql-proxy

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/${_DATABASE_PASSWORD_KEY}/versions/latest
      env: DATABASE_PASS
    - versionName: projects/$PROJECT_ID/secrets/cloud-sa-key/versions/latest
      env: CRED_FILE
# [END cloudbuild_sql_proxy]
