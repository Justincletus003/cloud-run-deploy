# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# [START cloudbuild_go_yaml]
# [START cloudbuild_go_test_yaml]
steps:
  # Run tests and save to file
  - name: golang:1.16
    entrypoint: /bin/bash
    args: 
      - -c
      - |
        go install github.com/jstemmer/go-junit-report/v2@latest
        2>&1 go test -timeout 1m -v ./... | /go/bin/go-junit-report -set-exit-code -iocopy -out ${SHORT_SHA}_test_log.xml
  # [END cloudbuild_go_test_yaml]
  # [START cloudbuild_sql_proxy_layer]
  # - id: "docker-layer"
  - name: "gcr.io/cloud-builders/docker"
    entrypoint: /bin/bash
    args:
      - '-c'
      - |
        echo "FROM gcr.io/cloudsql-docker/gce-proxy
        COPY --from=gcr.io/cloudsql-docker/gce-proxy /cloud_sql_proxy /cloudsql/cloud_sql_proxy" > Dockerfile-proxy;
        docker build -f Dockerfile-proxy -t db-proxy .
  # [END cloudbuild_sql_proxy_layer]

  # [START cloudbuild_sql_proxy_socket]
  # For Unix Socket connections
  - name: "migrate-socket"
    dir: sql-proxy
    env:
      - "DATABASE_NAME=${dbname}"
      - "DATABASE_USER=${user}"
      - "DATABASE_PASS=${password}"
      - "INSTANCE_CONNECTION_NAME=${instance_name}"
    # secretEnv:
    #   - DATABASE_PASS
    entrypoint: /bin/bash
    args:
      - '-c'
      - |
        /cloudsql/cloud_sql_proxy -instances=${instance_name} -dir=/cloudsql & sleep 2;
        echo $DATABASE_NAME
  # [END cloudbuild_sql_proxy_socket]

  # [START cloudbuild_go_image_yaml]
  # Docker Build
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 
           'gcr.io/$PROJECT_ID/cloud-run-deploy:$SHORT_SHA', '.']
  # [END cloudbuild_go_image_yaml]
  
  # [START cloudbuild_go_push_yaml]
  # Docker push to Google Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/cloud-run-deploy:$SHORT_SHA']
  # [END cloudbuild_go_push_yaml]
  
  # [START cloudbuild_go_deploy_yaml]
  # Deploy to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args: ['run', 'deploy', 'cloud-run-deploy', 
           '--image=gcr.io/$PROJECT_ID/cloud-run-deploy:$SHORT_SHA', 
           '--region', 'us-central1', '--platform', 'managed']
  # [END cloudbuild_go_deploy_yaml]
